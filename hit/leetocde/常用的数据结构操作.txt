str(bin(num))：将num转化为二进制str形式
int(str(num), x)：将x进制的num转为十进制
ord(char)：得到char字符的ASCII码
chr(ch)：得到ASCII码的char字符     A:65  a:97
str.isdigit()：判断字符串是否为数字
平方根：a**0.5，用int取整

列表操作：
合并列表元素："".join(list)
弹出：item = list.pop()，复杂度O(n)，弹出队尾元素，想弹出队首需要pop(0)，按索引弹出
插入：list.append(item)，复杂度O(n)，插入队尾；list.insert(index, item)，插入指定索引处
删除：list.remove(item)，复杂度O(n)，按值删除
排序：list.sort(key=lambda x:(x[0],x[1]), reverse=False)     原地排序
	先根据x[0]升序排序，再根据x[1]对每一部分x[0]升序排序，等价于sort(key=lambda x:x[1])然后再sort(key=lambda x:x[0])
	.sort()函数不能在列表创建赋值时使用，因为他是原地排序算法，会返回None，所以必须写成两行
排序：new_list = sorted(list)，非原地排序，返回list   不是只针对列表排序，也可以对字典和集合使用
提取某一行或某一列：dp[0]  # 第0行    [x[0] for x in arr]  # 第0列    只有numpy才可以写成arr[:, 1]
查找某个元素： i = list.index(item)    # 只会找到第一个对应元素
翻转列表： list.reverse()    原地函数，无返回值   new_list = reversed(list)   返回新列表      new_list = list[::-1] 返回新列表
查找元素索引： index = list.index(target, begin, end)


字符串操作：
int = s.count(char)：输出字符串中char出现的次数
list = s.split(char)：根据char对字符串做切片，返回切片后的列表
str = s.strip(str)：去除s首尾的str


字典操作：  
dic.keys()：得到字典的所有key，可迭代      list不可哈希，tuple可哈希
dic.values()：得到字典所有的value，可迭代
dic.items()：得到字典所有的(key, value)元组对，可迭代
dic.pop(key)：删除字典中某一键值对，以key作为索引
dic.popitem()   # 随即返回并删除一个键值对
字典的计数方法：dic = collections.Counter(str)
默认值字典：collections.defaultdict(func)   例如：collections.defaultdict(lambda:0)   # 总是忘记写默认值函数
有序字典：collections.OrderedDict()
获取字典中值最大的键： max(dic, key=dic.get)
获取字典中的最大值：max(dic.values())
求键或键值对的个数：len(dict)


集合操作：
set.add(item)：向集合中添加元素
set.remove(item)：删除集合元素
set(object)：集合可以帮助去除重复的元素


队列操作：
import queue
Q = queue.Queue()
Q.put()
item = Q.get()
size = Q.qsize()
双端队列：
q = collections.deque(nums)
q.append(item)  # 从后面插入数据   q.appendleft(item)   # 从前面插入数据
q.pop()    # 从后面取数据      q.popleft()   # 从前面取数据
q.insert(index, item)   # 在指定索引插入数据


堆操作：
heapq    # 默认小顶堆，想用大顶堆需要取相反数操作
heapq.heapify(list)
heapq.heappush(list, item)
element = heapq.heappop(list)   # heappop(list)和list.pop(0)不是一样的函数！做题遇到过
heapq.nlargest(n, nums)    heapq.nsmallest(n, nums)


numpy操作：
np.max(a) np.min(a)：获得array的最大值和最小值
np.argmax(a)：获得最大值对应的索引
a[a==1].size：返回数组a里值为1的子数组，.size可以得到值为1的个数
x[: , np.newaxis]：新增一个维度，可以用于把行向量变为列向量
np.where(condition)：返回符合特定条件的索引，比如x>3。如果直接x>3的话会得到True False数组
X.T：对矩阵X进行转置
需要矩阵运算时声明np.mat，否则声明np.array
a * b：如果是array的话就是对应位置相乘，如果是matrix的话就是矩阵运算
np.dot：无论是array还是matrix都是矩阵相乘，array如果是两个(dim, )类型的数组则计算内积，如果是多维数组则计算矩阵相乘， matrix就是标准的矩阵相乘
np.multiply：array对应位置相乘，最好用这个函数别用a * b；还有个叉乘的函数不重要
matrix相较于array的优势：matrix可以.H .I得到共轭矩阵和逆矩阵，matrix可以直接a*b来计算矩阵积，matrix在做归约运算时维度不会变，比如说对某一维度求mean，总结： 基本无卵用
np.mat用α * w * x做运算的时候需要把标量或者1x1矩阵(比如说α) 放前面，否则容易报维度不匹配的错误
用np.mat内积运算得到的结果是一个1x1矩阵而不是float，导致有很多奇怪的报错，而用array就可以得到float
np.concatenate((ndarray1, ndarray2), axis=0/1)
np.random.shuffle(x)：打乱数据


位运算：
&：与
|：或
^：异或
~：取反
x & (x-1)：消去x最后一个1 (判断是否是2的次幂)
0 ^ x = x
a ^ b ^ b = a


其他特殊操作：
enumerate： for i, v in enumerate(nums)，同时遍历列表的索引和值
zip： for v1, v2 in zip(nums1, nums2)，同时对两个列表进行遍历
交换操作: a[i], a[j] = a[j], a[i]  不要再用tmp了
max和min：max(list, key=lambda x:abs(x))；max(list, key=len)；max(list, key=lambda x:x[1])；max不仅可以对list操作，还可以对dict，set
异或运算：x^y
删除字符串首尾空格：str.strip()
判断list是否全为True或False：all(list)
根据指定字符划分字符串为列表：list = str.split(char)
矩阵根据索引找位置：matrix[index / row][index % col]


debug：
python全局变量，如果想在函数中更改值，需要nonlocal重新定义，否则函数体内只能识别但不能改写。列表不受此限制
ans.append(path[:])
nums[i], nums[nums[i]-1] = nums[nums[i]-1], nums[i]  # 大坑, 改变nums[i]的时候会改变nums[nums[i]-1]  
	但是可以写成nums[nums[i]-1], nums[i] = nums[i], nums[nums[i]-1] 
s[i], s[j] = s[j], s[i]    # 报错，字符串属于不可变类型，不能直接修改，一般都是转化为列表
pre, cur1, cur2, nxt = cur1, nxt, nxt.next, cur2.next   # 报错，死循环。链表里涉及指针的最好还是不要这么写，拆成四行就能运行

骚操作：
返回子序列(回溯)：list(itertools.combinations(nums, k))
无序数组贪婪归并，直接对字典序进行比较：while num1 or num2:   bigger = num1 if num1>num2 else num2    res.append(bigger[0])   bigger.pop(0)
1，0交换值：可以直接用1-num
翻转矩阵：[[row[j] for row in matrix] for j in range(col)]
原地左旋转字符串：前后分别反转，然后再整体反转，python可以直接[k:]+[:k]
只存在一次的数字：位运算，异或操作
判断回文：双指针从中间开始或从两边开始
顺时针遍历：可以用while count <= m*n 来结束循环
递归题打印：def debug_print(count):  for _ in range(count):  print("  ", end="") ，提高刷题幸福感
