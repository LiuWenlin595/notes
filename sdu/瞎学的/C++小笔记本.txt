C++的输入输出方式
namespace
引用和取地址，指针
结构体
const
函数参数默认值
函数重载
内联函数
内存的申请和释放

栈和堆，不实例化放在栈里，实例化放在堆里
栈和堆的成员对象的访问方式
类 末尾一定加分号
String类型
类内编译会优先编译为内联函数
同文件类外定义和分文件类外定义
初始化列表（const） ，为什么构造函数不能替代
普通构造函数和拷贝构造函数    ，函数形参为类也会触发拷贝构造函数
析构函数   系统也会自动生成
如果对象A中有对象成员B，对象B没有默认构造函数（也就是有参数传递），那么对象A必须在初始化列表中初始化对象B。








成员对象如果没有默认构造函数必须在初始化列表中定义
深拷贝和浅拷贝
对象指针和this指针
常对象成员和常成员函数    （常成员函数和普通成员函数可以构成重载）




虚函数   虚析构函数    纯虚函数
抽象类和接口类










共有继承，保护继承，私有继承
隐藏   父子相同函数不同参数――不允许
释放对象的时候，虚析构函数
多继承与多重继承
虚继承  ->  有点难理解  
宏定义   #ifndef...#define...#endif  ->避免重复包含



静态多态(早绑定)   动态多态(晚绑定)
虚函数的适用范围-> 不是普通函数，不是静态成员函数，不是内联函数，不是构造函数
虚函数表和虚函数表指针->没明白
RTTI
typeid注意事项：type_id 返回一个type_info对象 。如果想通过基类的指针获得派生类的数据类型，基类必须带有虚函数。只能获得对象的实际类型
异常处理







友元函数，友元类
友元关系不可传递，友元关系的单向性（友元只是封装的补充，对封装性并不友好）
静态成员必须初始化，静态函数不能调用非静态数据成员和非静态函数
运算符重载关键字：opeartor
成员函数重载Coordinate& opeartor-()      友元函数重载friend Coordinate& opeartor-(Coordinate &c)
前置++运算符重载Coordinate& opeartor++()   后置++运算符重载Coordinate& operator++(int)
二元运算符重载： 成员函数->只有一个参数(前面默认this指针)   友元函数重载->可以有两个参数也可以有一个(有一个的话也是前面默认this指针)
函数模板，多参数函数模板，类模板